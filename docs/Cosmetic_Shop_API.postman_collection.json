{
  "info": {
    "_postman_id": "cosmetic-shop-api-v1",
    "name": "Cosmetic Shop API",
    "description": "Complete API collection for Cosmetic Shop application including authentication, products, and orders management.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "cosmetic-shop"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.tokens) {",
                  "        pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', responseJson.data.user._id);",
                  "        console.log('Tokens saved to environment');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account. Returns user data and JWT tokens.\n\n**Required Fields:**\n- name: User's full name (2-50 chars)\n- email: Valid email address\n- password: Password (min 6 chars, must include numbers)\n\n**Optional Fields:**\n- phone: Phone number"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "register"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"507f1f77bcf86cd799439011\",\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"user\",\n      \"isActive\": true,\n      \"emailVerified\": false,\n      \"createdAt\": \"2025-10-22T18:15:00.000Z\"\n    },\n    \"tokens\": {\n      \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n      \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.tokens) {",
                  "        pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', responseJson.data.user._id);",
                  "        console.log('Login successful, tokens saved');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Authenticate user and return JWT tokens.\n\n**Rate Limited:** 5 attempts per 15 minutes"
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "description": "JWT access token (auto-filled from login)"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            },
            "description": "Get current user profile. Requires authentication.\n\n**Headers Required:**\n- Authorization: Bearer {accessToken}"
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Updated\",\n  \"phone\": \"+1234567890\",\n  \"preferences\": {\n    \"newsletter\": true,\n    \"notifications\": false\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            },
            "description": "Update user profile information.\n\n**Updatable Fields:**\n- name: User's full name\n- phone: Phone number\n- preferences: Newsletter and notification settings"
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"password123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "change-password"]
            },
            "description": "Change user password. Requires current password for security."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.accessToken) {",
                  "        pm.environment.set('accessToken', responseJson.data.accessToken);",
                  "        console.log('Access token refreshed');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "Refresh access token using refresh token.\n\n**Use Case:** When access token expires (15 minutes)"
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "forgot-password"]
            },
            "description": "Request password reset email.\n\n**Rate Limited:** 5 attempts per 15 minutes\n**Note:** Always returns success for security (doesn't reveal if email exists)"
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-from-email\",\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "reset-password"]
            },
            "description": "Reset password using reset token from email.\n\n**Token Validity:** 1 hour"
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"verification-token-from-email\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-email"]
            },
            "description": "Verify email address using verification token.\n\n**Token Validity:** 24 hours"
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout user (client-side token removal).\n\n**Note:** In JWT stateless system, logout is primarily client-side"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:5001');",
          "    console.log('🔧 Base URL set to localhost:5001');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5001",
      "type": "string",
      "description": "API base URL (auto-configured for local development)"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string",
      "description": "JWT access token (auto-filled from login/register)"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string",
      "description": "JWT refresh token (auto-filled from login/register)"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "Current user ID (auto-filled from login/register)"
    }
  ]
}