{
  "info": {
    "_postman_id": "cosmetic-shop-api-v1",
    "name": "Cosmetic Shop API",
    "description": "Complete API collection for Cosmetic Shop application including authentication, products, and orders management.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "cosmetic-shop"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.tokens) {",
                  "        pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', responseJson.data.user._id);",
                  "        console.log('Tokens saved to environment');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account. Returns user data and JWT tokens.\n\n**Required Fields:**\n- name: User's full name (2-50 chars)\n- email: Valid email address\n- password: Password (min 6 chars, must include numbers)\n\n**Optional Fields:**\n- phone: Phone number"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/api/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "auth", "register"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"507f1f77bcf86cd799439011\",\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"user\",\n      \"isActive\": true,\n      \"emailVerified\": false,\n      \"createdAt\": \"2025-10-22T18:15:00.000Z\"\n    },\n    \"tokens\": {\n      \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n      \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.tokens) {",
                  "        pm.environment.set('accessToken', responseJson.data.tokens.accessToken);",
                  "        pm.environment.set('refreshToken', responseJson.data.tokens.refreshToken);",
                  "        pm.environment.set('userId', responseJson.data.user._id);",
                  "        console.log('Login successful, tokens saved');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Authenticate user and return JWT tokens.\n\n**Rate Limited:** 5 attempts per 15 minutes"
          },
          "response": []
        },
        {
          "name": "Create Order for User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) {",
                  "  const json = pm.response.json();",
                  "  const id = json?.data?.order?._id;",
                  "  if (id) {",
                  "    pm.collectionVariables.set('orderId', id);",
                  "    try { pm.environment.set('orderId', id); } catch(e) {}",
                  "    console.log('orderId saved to collection (and env if active):', id);",
                  "  }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    { \"product\": \"{{productId}}\", \"quantity\": 1 }\n  ],\n  \"billingAddress\": { \"street\": \"A\", \"city\": \"B\", \"state\": \"C\", \"zipCode\": \"00000\", \"country\": \"X\" },\n  \"shippingAddress\": { \"street\": \"A\", \"city\": \"B\", \"state\": \"C\", \"zipCode\": \"00000\", \"country\": \"X\" },\n  \"shipping\": { \"method\": \"standard\" },\n  \"payment\": { \"method\": \"cash-on-delivery\" }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "user", "{{userId}}"]
            },
            "description": "Admin creates an order on behalf of a user identified by userId."
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "description": "JWT access token (auto-filled from login)"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            },
            "description": "Get current user profile. Requires authentication.\n\n**Headers Required:**\n- Authorization: Bearer {accessToken}"
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Updated\",\n  \"phone\": \"+1234567890\",\n  \"preferences\": {\n    \"newsletter\": true,\n    \"notifications\": false\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            },
            "description": "Update user profile information.\n\n**Updatable Fields:**\n- name: User's full name\n- phone: Phone number\n- preferences: Newsletter and notification settings"
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"password123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "change-password"]
            },
            "description": "Change user password. Requires current password for security."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.accessToken) {",
                  "        pm.environment.set('accessToken', responseJson.data.accessToken);",
                  "        console.log('Access token refreshed');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "Refresh access token using refresh token.\n\n**Use Case:** When access token expires (15 minutes)"
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "forgot-password"]
            },
            "description": "Request password reset email.\n\n**Rate Limited:** 5 attempts per 15 minutes\n**Note:** Always returns success for security (doesn't reveal if email exists)"
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-from-email\",\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "reset-password"]
            },
            "description": "Reset password using reset token from email.\n\n**Token Validity:** 1 hour"
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"verification-token-from-email\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-email"]
            },
            "description": "Verify email address using verification token.\n\n**Token Validity:** 24 hours"
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout user (client-side token removal).\n\n**Note:** In JWT stateless system, logout is primarily client-side"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products",
      "description": "Products CRUD endpoints",
      "item": [
        {
          "name": "List Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                { "key": "search", "value": "serum", "disabled": true },
                { "key": "category", "value": "skincare", "disabled": true },
                { "key": "brand", "value": "brand", "disabled": true },
                { "key": "tags", "value": "tag1,tag2", "disabled": true },
                { "key": "isFeatured", "value": "true", "disabled": true },
                { "key": "isOnSale", "value": "true", "disabled": true },
                { "key": "minPrice", "value": "0", "disabled": true },
                { "key": "maxPrice", "value": "100", "disabled": true },
                { "key": "sort", "value": "-createdAt", "disabled": true },
                { "key": "page", "value": "1", "disabled": true },
                { "key": "limit", "value": "12", "disabled": true }
              ]
            },
            "description": "List products with filters, sorting, and pagination. Non-admins see only active products. Admins can view inactive with includeInactive=true."
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Fetch a single product by ID. Admins can include inactive with includeInactive=true."
          },
          "response": []
        },
        {
          "name": "Create Product (Admin)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Vitamin C Serum\",\n  \"description\": \"Brightening serum...\",\n  \"price\": 19.99,\n  \"category\": \"skincare\",\n  \"brand\": \"GlowCo\",\n  \"sku\": \"GLOW-VC-30ML\",\n  \"images\": [{ \"url\": \"https://example.com/img.jpg\", \"alt\": \"Bottle\", \"isPrimary\": true }],\n  \"inventory\": { \"quantity\": 50 }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            },
            "description": "Create a product. Requires admin access."
          },
          "response": []
        },
        {
          "name": "Update Product (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 17.99,\n  \"isOnSale\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Update a product by ID. Requires admin access."
          },
          "response": []
        },
        {
          "name": "Delete Product (Admin, Soft Delete)",
          "request": {
            "method": "DELETE",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            },
            "description": "Soft delete (deactivate) a product by ID. Requires admin access."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Orders",
      "description": "Orders endpoints (user + admin)",
      "item": [
        {
          "name": "Create Order (User)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) {",
                  "  const json = pm.response.json();",
                  "  const id = json?.data?.order?._id;",
                  "  if (id) {",
                  "    pm.collectionVariables.set('orderId', id);",
                  "    try { pm.environment.set('orderId', id); } catch(e) {}",
                  "    console.log('orderId saved to collection (and env if active):', id);",
                  "  }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    { \"product\": \"{{productId}}\", \"quantity\": 1 }\n  ],\n  \"customer\": { \"name\": \"John Doe\", \"email\": \"john@example.com\" },\n  \"billingAddress\": { \"street\": \"A\", \"city\": \"B\", \"state\": \"C\", \"zipCode\": \"00000\", \"country\": \"X\" },\n  \"shippingAddress\": { \"street\": \"A\", \"city\": \"B\", \"state\": \"C\", \"zipCode\": \"00000\", \"country\": \"X\" },\n  \"shipping\": { \"method\": \"standard\" },\n \"payment\": { \"method\": \"cash-on-delivery\" }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"]
            },
            "description": "Create an order for the authenticated user."
          },
          "response": []
        },
        {
          "name": "List My Orders (User)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/mine",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "mine"]
            },
            "description": "List orders for the authenticated user. Supports page,limit."
          },
          "response": []
        },
        {
          "name": "List Orders (Admin)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"],
              "query": [
                { "key": "status", "value": "pending", "disabled": true },
                { "key": "userId", "value": "{{userId}}", "disabled": true },
                { "key": "startDate", "value": "2025-10-01", "disabled": true },
                { "key": "endDate", "value": "2025-10-31", "disabled": true },
                { "key": "page", "value": "1", "disabled": true },
                { "key": "limit", "value": "20", "disabled": true }
              ]
            },
            "description": "Admin list of all orders with optional filters."
          },
          "response": []
        },
        {
          "name": "List Orders for User (Admin)",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders?userId={{userId}}&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders"],
              "query": [
                { "key": "userId", "value": "{{userId}}", "disabled": false },
                { "key": "page", "value": "1", "disabled": false },
                { "key": "limit", "value": "20", "disabled": false }
              ]
            },
            "description": "Admin-only: list orders for a specific userId."
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}"]
            },
            "description": "Get order by ID. Requires owner or admin."
          },
          "response": []
        },
        {
          "name": "Update Status (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"processing\",\n  \"note\": \"Packed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "status"]
            },
            "description": "Admin updates order status."
          },
          "response": []
        },
        {
          "name": "Add Tracking (Admin)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"carrier\": \"DHL\",\n  \"trackingNumber\": \"ABC123\",\n  \"trackingUrl\": \"https://track.example.com/ABC123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/tracking",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "tracking"]
            },
            "description": "Admin adds tracking info."
          },
          "response": []
        },
        {
          "name": "Process Payment (Admin)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{accessToken}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"transactionId\": \"txn_123\",\n  \"method\": \"stripe\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/orders/{{orderId}}/payment",
              "host": ["{{baseUrl}}"],
              "path": ["api", "orders", "{{orderId}}", "payment"]
            },
            "description": "Admin marks payment as completed."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set base URL if not set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:5007');",
          "    console.log('🔧 Base URL set to localhost:5007');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5007",
      "type": "string",
      "description": "API base URL (auto-configured for local development)"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string",
      "description": "Product ID used in Products requests"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string",
      "description": "Order ID used in Orders requests"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string",
      "description": "JWT access token (auto-filled from login/register)"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string",
      "description": "JWT refresh token (auto-filled from login/register)"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "Current user ID (auto-filled from login/register)"
    }
  ]
}